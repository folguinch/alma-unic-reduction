window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "unic_pipeline", "modulename": "unic_pipeline", "kind": "module", "doc": "<h1 id=\"alma-unic-pipeline\">ALMA-UNIC pipeline</h1>\n\n<h2 id=\"installation\">Installation</h2>\n\n<p>Before start, the installation will also install/update the dependencies. These\ninclude modular CASA. If you have a system wide modular CASA installation that\nyou want to keep, then it is recommended to install the pipeline within a \nvirtual environment.</p>\n\n<h3 id=\"general-use\">General use</h3>\n\n<p>To install the ALMA-UNIC pipeline:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code>pip<span class=\"w\"> </span>install<span class=\"w\"> </span>git+git@github.com:alma-unic/alma-unic-reduction.git\n</code></pre>\n</div>\n\n<p>For tasks requiring <code>tclean</code>, a monolithic CASA version is needed. If you prefer a\nspecific version of casa/mpicasa, then you can define the following environmental\nvariable:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"nb\">export</span><span class=\"w\"> </span><span class=\"nv\">MPICASA</span><span class=\"o\">=</span><span class=\"s2\">&quot;/path/to/mpicasa -n {0} /path/to/casa&quot;</span>\n</code></pre>\n</div>\n\n<p>Note that only the paths to <code>casa</code> and <code>mpicasa</code> need to be modified, the number\nof processes (after the <code>-n</code> flag) is evaluated internally from the command line\noptions.</p>\n\n<h3 id=\"for-developing\">For developing</h3>\n\n<p>In general, to install in editable mode run:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"c1\"># Clone to your desired directory</span>\nmkdir<span class=\"w\"> </span>-p<span class=\"w\"> </span>/my/preferred/directory\n<span class=\"nb\">cd</span><span class=\"w\"> </span>/my/preferred/directory\ngit<span class=\"w\"> </span>clone<span class=\"w\"> </span>git@github.com:alma-unic/alma-unic-reduction.git\n\n<span class=\"c1\"># Install with pip in editable mode</span>\n<span class=\"nb\">cd</span><span class=\"w\"> </span>unic-pipeline\npip<span class=\"w\"> </span>install<span class=\"w\"> </span>-e<span class=\"w\"> </span>.\n</code></pre>\n</div>\n\n<p>If you use <code>poetry</code> to manage dependencies, then follow their instructions for\ninstallation with the lock file.</p>\n\n<p>All dependencies are managed in the <code>pyproject.toml</code> file within the base\ndirectory.</p>\n\n<h2 id=\"usage\">Usage</h2>\n\n<p>Starting from the calibrated MS generated after the script for PI, run:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code>python<span class=\"w\"> </span>-m<span class=\"w\"> </span>unic_pipeline.unic<span class=\"w\"> </span>--uvdata<span class=\"w\"> </span><span class=\"se\">\\p</span>ath<span class=\"se\">\\t</span>o<span class=\"se\">\\c</span>alibrated<span class=\"se\">\\d</span>ata1.ms<span class=\"w\"> </span><span class=\"se\">\\p</span>ath<span class=\"se\">\\t</span>o<span class=\"se\">\\c</span>alibrated<span class=\"se\">\\d</span>ata2.ms<span class=\"w\"> </span>...<span class=\"w\"> </span>--cont<span class=\"w\"> </span><span class=\"se\">\\p</span>ath<span class=\"se\">\\t</span>o<span class=\"se\">\\c</span>alibration<span class=\"se\">\\c</span>ont1.dat<span class=\"w\"> </span><span class=\"se\">\\p</span>ath<span class=\"se\">\\t</span>o<span class=\"se\">\\c</span>alibration<span class=\"se\">\\c</span>ont2.dat<span class=\"w\"> </span>...<span class=\"w\"> </span>--nproc<span class=\"w\"> </span>N<span class=\"w\"> </span>...\n</code></pre>\n</div>\n\n<p>The <code>--cont</code> flag indicates where the files with the continuum frequency ranges\nare located. Note that the SPW numbering of 7m and 12m data is different, hence\nthe <code>cont.dat</code> files must be specified for each array. In the example above\n<code>cont1.dat</code> is the contains the continuum frequencies for <code>data.ms</code>.</p>\n\n<p>A single MS may contain more than 1 source. The pipeline extracts the data for\nall the science sources and prepares the data for each one and performs the\nimaging. There is no limit in the amount of data, but bear in mind that they are\nprocessed in sequence.</p>\n\n<p>The amount of processors for parallel imaging can be specified with the\n<code>--nproc</code> flag. The verbosity level can be controlled with the <code>-v</code>, <code>--vv</code>,\n<code>--vvv</code> flags (see help).</p>\n\n<p>For help:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code>python<span class=\"w\"> </span>-m<span class=\"w\"> </span>unic_pipeline.unic<span class=\"w\"> </span>-h\n</code></pre>\n</div>\n\n<h3 id=\"resuming-and-skipping-steps\">Resuming and skipping steps</h3>\n\n<p>The pipeline is divided in several steps. In general, the program will check\nwhether the files generated by a step are already in the system and delete them\nto perform the step again. However, these steps can be skipped if the files are\npresent with the <code>--resume</code> flag.</p>\n\n<p>It is also possible to skip specific steps (see step list below), except for\nthose needed to collect needed information. To skip a step use the\n<code>--skip step1 step2 ...</code> flag.</p>\n\n<p><em>WARNING: the following has not been tested thoroughly.</em>\nAn initial run will generate a configuration file with parameters used for each\nstep. It is possible to resume the processing or start from zero with\nconfiguration files with:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code>python<span class=\"w\"> </span>-m<span class=\"w\"> </span>unic_pipeline.unic<span class=\"w\"> </span>--configfiles<span class=\"w\"> </span><span class=\"se\">\\p</span>ath<span class=\"se\">\\t</span>o<span class=\"se\">\\c</span>onfig1.ms<span class=\"w\"> </span><span class=\"se\">\\p</span>ath<span class=\"se\">\\t</span>o<span class=\"se\">\\c</span>onfig2.ms<span class=\"w\"> </span>...<span class=\"w\"> </span>--nproc<span class=\"w\"> </span>N<span class=\"w\"> </span>...\n</code></pre>\n</div>\n\n<h2 id=\"pipeline-steps-implemented\">Pipeline steps implemented</h2>\n\n<p>The following steps have been implemented (for more details see <code>unic.py</code> documentation):</p>\n\n<ul>\n<li><code>split</code>: It collects the data and split the science data.</li>\n<li><code>dirty_cubes</code>: Computes dirty cubes of the split data.</li>\n<li><code>continuum</code>: Generates the continuum MS files.</li>\n<li><code>contsub</code>: Produces continuum subtracted visibilities.</li>\n<li><code>combine_arrays</code>: Combine 7m and 12m data if possible.</li>\n<li><code>clean_cont</code>: Produce CLEAN continuum images.</li>\n<li><code>clean_cubes</code>: produce CLEAN continuum subtracted cubes.</li>\n</ul>\n\n<p>Continuum and cube cleaning are being tested.</p>\n"}, {"fullname": "unic_pipeline.argparse_actions", "modulename": "unic_pipeline.argparse_actions", "kind": "module", "doc": "<p>Collection of actions to process diferent command line inputs.</p>\n"}, {"fullname": "unic_pipeline.argparse_actions.validate_path", "modulename": "unic_pipeline.argparse_actions", "qualname": "validate_path", "kind": "function", "doc": "<p>Performs several checks on input path.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>path:</strong>  path to check.</li>\n<li><strong>check_is_file:</strong>  optional; check whether is file and exists.</li>\n<li><strong>check_is_dir:</strong>  optional; check whther is a directory and exists.</li>\n<li><strong>mkdir:</strong>  optional; make directories if they do not exist.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>A validated resolved pathlib.Path object</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span>,</span><span class=\"param\">\t<span class=\"n\">check_is_file</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">check_is_dir</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">mkdir</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "unic_pipeline.argparse_actions.validate_paths", "modulename": "unic_pipeline.argparse_actions", "qualname": "validate_paths", "kind": "function", "doc": "<p>Performs several checks on input list of file names.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>filenames:</strong>  list of filenames to check.</li>\n<li><strong>check_is_file:</strong>  optional; check whether is file and exists.</li>\n<li><strong>check_is_dir:</strong>  optional; check whther is a directory and exists.</li>\n<li><strong>mkdir:</strong>  optional; make directories if they do not exist.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Validate path.Path from the input strings.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">filenames</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">check_is_file</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">check_is_dir</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">mkdir</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "unic_pipeline.argparse_actions.NormalizePath", "modulename": "unic_pipeline.argparse_actions", "qualname": "NormalizePath", "kind": "class", "doc": "<p>Normalizes a path or filename.</p>\n", "bases": "argparse.Action"}, {"fullname": "unic_pipeline.argparse_actions.CheckFile", "modulename": "unic_pipeline.argparse_actions", "qualname": "CheckFile", "kind": "class", "doc": "<p>Validates files and check if they exist.</p>\n", "bases": "argparse.Action"}, {"fullname": "unic_pipeline.argparse_actions.StartLogger", "modulename": "unic_pipeline.argparse_actions", "qualname": "StartLogger", "kind": "class", "doc": "<p>Create a logger.</p>\n\n<p>If nargs=? (default), log to default or const if provided and flag used\nelse log only to stdout.\nFor verbose levels, the standard option_string values are:\n  -v, --vv, --vvv, --log, --info, --debug, --fulldebug\nWith: -v = --log = --info\n      --vv = --debug\n      --vvv = --fulldebug\nOther values will create a normal logger.</p>\n", "bases": "argparse.Action"}, {"fullname": "unic_pipeline.argparse_actions.StartLogger.__init__", "modulename": "unic_pipeline.argparse_actions", "qualname": "StartLogger.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">option_strings</span>,</span><span class=\"param\">\t<span class=\"n\">dest</span>,</span><span class=\"param\">\t<span class=\"n\">nargs</span><span class=\"o\">=</span><span class=\"s1\">&#39;?&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">metavar</span><span class=\"o\">=</span><span class=\"s1\">&#39;LOGFILE&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">const</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">default</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "unic_pipeline.argparse_parents", "modulename": "unic_pipeline.argparse_parents", "kind": "module", "doc": "<p>Argparse parent parsers commonly used.</p>\n"}, {"fullname": "unic_pipeline.argparse_parents.logger", "modulename": "unic_pipeline.argparse_parents", "qualname": "logger", "kind": "function", "doc": "<p>Parent parser to initiate a logging system.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>filename:</strong>  optional; default filename for logging.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">filename</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">use_casa</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">argparse</span><span class=\"o\">.</span><span class=\"n\">ArgumentParser</span>:</span></span>", "funcdef": "def"}, {"fullname": "unic_pipeline.build_tree", "modulename": "unic_pipeline.build_tree", "kind": "module", "doc": "<p>Build a directory tree and indetifies sources and arrays.</p>\n"}, {"fullname": "unic_pipeline.build_tree.find_calibrated", "modulename": "unic_pipeline.build_tree", "qualname": "find_calibrated", "kind": "function", "doc": "<p>Find the calibrated MS within <code>directory</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">directory</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span>:</span></span>", "funcdef": "def"}, {"fullname": "unic_pipeline.build_tree.build_table", "modulename": "unic_pipeline.build_tree", "qualname": "build_table", "kind": "function", "doc": "<p>Build table with paths and sources.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">ms_list</span><span class=\"p\">:</span> <span class=\"n\">List</span>, </span><span class=\"param\"><span class=\"n\">filename</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "unic_pipeline.build_tree.build_tree", "modulename": "unic_pipeline.build_tree", "qualname": "build_tree", "kind": "function", "doc": "<p>Search for MS within input directory.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "unic_pipeline.clean_tasks", "modulename": "unic_pipeline.clean_tasks", "kind": "module", "doc": "<p>Tools for running the <code>tclean</code> CASA task.</p>\n"}, {"fullname": "unic_pipeline.clean_tasks.recommended_auto_masking", "modulename": "unic_pipeline.clean_tasks", "qualname": "recommended_auto_masking", "kind": "function", "doc": "<p>Recommended auto-masking values per array.</p>\n\n<p>From the table in <a href=\"https://casaguides.nrao.edu/index.php/Automasking_Guide\">CASA\nguide</a>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">array</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "unic_pipeline.clean_tasks.get_tclean_params", "modulename": "unic_pipeline.clean_tasks", "qualname": "get_tclean_params", "kind": "function", "doc": "<p>Filter input parameters and convert values to the correct type.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>config:</strong>  <code>ConfigParser</code> section proxy with input parameters to filter.</li>\n<li><strong>ignore_keys:</strong>  Optional; <code>tclean</code> parameters to ignore.</li>\n<li><strong>float_keys:</strong>  Optional; <code>tclean</code> parameters to convert to float.</li>\n<li><strong>int_keys:</strong>  Optional; <code>tclean</code> parameters to convert to int.</li>\n<li><strong>bool_keys:</strong>  Optional; <code>tclean</code> parameters to convert to bool.</li>\n<li><strong>int_list_keys:</strong>  Optional; <code>tclean</code> parameters as list of integers.</li>\n<li><strong>cfgvars:</strong>  Optional; Parameters to replace those in config file.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">config</span><span class=\"p\">:</span> <span class=\"n\">Mapping</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">required_keys</span><span class=\"p\">:</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s1\">&#39;cell&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;imsize&#39;</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">ignore_keys</span><span class=\"p\">:</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s1\">&#39;vis&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;imagename&#39;</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">float_keys</span><span class=\"p\">:</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s1\">&#39;robust&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;pblimit&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;pbmask&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;sidelobethreshold&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;noisethreshold&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;minbeamfrac&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;lownoisethreshold&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;negativethreshold&#39;</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">int_keys</span><span class=\"p\">:</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s1\">&#39;niter&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;chanchunks&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;nterms&#39;</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">bool_keys</span><span class=\"p\">:</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s1\">&#39;interactive&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;parallel&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;pbcor&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;perchanweightdensity&#39;</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">int_list_keys</span><span class=\"p\">:</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s1\">&#39;imsize&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;scales&#39;</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">cfgvars</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "unic_pipeline.clean_tasks.tclean_parallel", "modulename": "unic_pipeline.clean_tasks", "qualname": "tclean_parallel", "kind": "function", "doc": "<p>Run <code>tclean</code> in parallel.</p>\n\n<p>If the number of processes (<code>nproc</code>) is 1, then it is run in a single\nprocessor. The environmental variable <code>MPICASA</code> is used to run the code,\notherwise it will use the <code>mpicasa</code> and <code>casa</code> available in the system.</p>\n\n<p>A new logging file is created by <code>mpicasa</code>. This is located in the same\ndirectory where the program is executed.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>vis:</strong>  Measurement set.</li>\n<li><strong>imagename:</strong>  Image file name.</li>\n<li><strong>nproc:</strong>  Number of processes.</li>\n<li><strong>tclean_args:</strong>  Other arguments for tclean.</li>\n<li><strong>log:</strong>  Optional; Logging function.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">vis</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span>,</span><span class=\"param\">\t<span class=\"n\">imagename</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span>,</span><span class=\"param\">\t<span class=\"n\">nproc</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">tclean_args</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">log</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">Logger</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "unic_pipeline.clean_tasks.auto_thresh_clean", "modulename": "unic_pipeline.clean_tasks", "qualname": "auto_thresh_clean", "kind": "function", "doc": "<p>Find a threshold value from a dirty image.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>vis:</strong>  Measurement set.</li>\n<li><strong>imagename:</strong>  Image file name.</li>\n<li><strong>nproc:</strong>  Number of processes.</li>\n<li><strong>tclean_args:</strong>  Other arguments for tclean.</li>\n<li><strong>thresh_niter:</strong>  Optional; Number of iterations to find threshhold.</li>\n<li><strong>nsigma:</strong>  Optional; Threshold level over rms for each iteration.</li>\n<li><strong>sigfig:</strong>  Optional; Number of significant figures.</li>\n<li><strong>log:</strong>  Optional; Logging function.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">vis</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span>,</span><span class=\"param\">\t<span class=\"n\">imagename</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span>,</span><span class=\"param\">\t<span class=\"n\">nproc</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">tclean_args</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">thresh_niter</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>,</span><span class=\"param\">\t<span class=\"n\">nsigma</span><span class=\"p\">:</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mf\">3.0</span><span class=\"p\">,)</span>,</span><span class=\"param\">\t<span class=\"n\">sigfig</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>,</span><span class=\"param\">\t<span class=\"n\">log</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">Logger</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "unic_pipeline.clean_tasks.cube_multi_images", "modulename": "unic_pipeline.clean_tasks", "qualname": "cube_multi_images", "kind": "function", "doc": "<p>Generate image names for <code>cube_multi_clean</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">imagename</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "unic_pipeline.clean_tasks.cube_multi_clean", "modulename": "unic_pipeline.clean_tasks", "qualname": "cube_multi_clean", "kind": "function", "doc": "<p>Clean cubes in multiple steps.</p>\n\n<p>It first run a <code>Hogbom</code> with <code>auto-multithresh</code> clean to produce a mask and\nthreshold. Then it uses these and <code>multiscale</code> for a final clean.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>vis:</strong>  Measurement set.</li>\n<li><strong>imagename:</strong>  Image file name.</li>\n<li><strong>nproc:</strong>  Number of processes.</li>\n<li><strong>array:</strong>  Array to image.</li>\n<li><strong>tclean_args:</strong>  Other arguments for tclean.</li>\n<li><strong>thresh_niter:</strong>  Optional; Number of iterations to find threshhold.</li>\n<li><strong>nsigma:</strong>  Optional; Threshold level over rms for each iteration.</li>\n<li><strong>sigfig:</strong>  Optional; Number of significant figures.</li>\n<li><strong>plot_results:</strong>  Optional; Plot initial clean results.</li>\n<li><strong>resume:</strong>  Optional; Resume where it was left?</li>\n<li><strong>log:</strong>  Optional; Logger.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>The final image name and the threshold.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">vis</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span>,</span><span class=\"param\">\t<span class=\"n\">imagename</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span>,</span><span class=\"param\">\t<span class=\"n\">nproc</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">array</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">tclean_args</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">thresh_niter</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>,</span><span class=\"param\">\t<span class=\"n\">nsigma</span><span class=\"p\">:</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mf\">3.0</span><span class=\"p\">,)</span>,</span><span class=\"param\">\t<span class=\"n\">sigfig</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>,</span><span class=\"param\">\t<span class=\"n\">plot_results</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">resume</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">log</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">Logger</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "unic_pipeline.common_types", "modulename": "unic_pipeline.common_types", "kind": "module", "doc": "<p>Common types.</p>\n"}, {"fullname": "unic_pipeline.common_types.SectionProxy", "modulename": "unic_pipeline.common_types", "qualname": "SectionProxy", "kind": "variable", "doc": "<p></p>\n", "default_value": "typing.Mapping[str, str]"}, {"fullname": "unic_pipeline.data_handler", "modulename": "unic_pipeline.data_handler", "kind": "module", "doc": "<p>Handlers for managing and processing data.</p>\n"}, {"fullname": "unic_pipeline.data_handler.new_array_dict", "modulename": "unic_pipeline.data_handler", "qualname": "new_array_dict", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">arrays</span><span class=\"p\">:</span> <span class=\"n\">Sequence</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s1\">&#39;12m&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;7m&#39;</span><span class=\"p\">)</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "unic_pipeline.data_handler.ArrayHandler", "modulename": "unic_pipeline.data_handler", "qualname": "ArrayHandler", "kind": "class", "doc": "<p>Keep track of array data.</p>\n"}, {"fullname": "unic_pipeline.data_handler.ArrayHandler.__init__", "modulename": "unic_pipeline.data_handler", "qualname": "ArrayHandler.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">array</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">log</span><span class=\"p\">:</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">Logger</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">uvdata</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">configfile</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">neb</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">cont_file</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">default_config</span><span class=\"p\">:</span> <span class=\"n\">dataclasses</span><span class=\"o\">.</span><span class=\"n\">InitVar</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">datadir</span><span class=\"p\">:</span> <span class=\"n\">dataclasses</span><span class=\"o\">.</span><span class=\"n\">InitVar</span><span class=\"p\">[</span><span class=\"n\">Path</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">PosixPath</span><span class=\"p\">(</span><span class=\"s1\">&#39;/home/users/folguin/python_devel&#39;</span><span class=\"p\">)</span></span>)</span>"}, {"fullname": "unic_pipeline.data_handler.ArrayHandler.name", "modulename": "unic_pipeline.data_handler", "qualname": "ArrayHandler.name", "kind": "variable", "doc": "<p>Name of the field.</p>\n", "annotation": ": Optional[str]", "default_value": "None"}, {"fullname": "unic_pipeline.data_handler.ArrayHandler.array", "modulename": "unic_pipeline.data_handler", "qualname": "ArrayHandler.array", "kind": "variable", "doc": "<p>Array name.</p>\n", "annotation": ": Optional[str]", "default_value": "None"}, {"fullname": "unic_pipeline.data_handler.ArrayHandler.config", "modulename": "unic_pipeline.data_handler", "qualname": "ArrayHandler.config", "kind": "variable", "doc": "<p>Configuration parser.</p>\n", "annotation": ": Optional[configparser.ConfigParser]", "default_value": "None"}, {"fullname": "unic_pipeline.data_handler.ArrayHandler.log", "modulename": "unic_pipeline.data_handler", "qualname": "ArrayHandler.log", "kind": "variable", "doc": "<p>Logging object.</p>\n", "annotation": ": logging.Logger", "default_value": "None"}, {"fullname": "unic_pipeline.data_handler.ArrayHandler.uvdata", "modulename": "unic_pipeline.data_handler", "qualname": "ArrayHandler.uvdata", "kind": "variable", "doc": "<p>Measurement set directory.</p>\n", "annotation": ": Optional[pathlib.Path]", "default_value": "None"}, {"fullname": "unic_pipeline.data_handler.ArrayHandler.configfile", "modulename": "unic_pipeline.data_handler", "qualname": "ArrayHandler.configfile", "kind": "variable", "doc": "<p>Configuration file name.</p>\n", "annotation": ": Optional[pathlib.Path]", "default_value": "None"}, {"fullname": "unic_pipeline.data_handler.ArrayHandler.neb", "modulename": "unic_pipeline.data_handler", "qualname": "ArrayHandler.neb", "kind": "variable", "doc": "<p>Number of execution blocks in the uvdata.</p>\n", "annotation": ": Optional[int]", "default_value": "None"}, {"fullname": "unic_pipeline.data_handler.ArrayHandler.cont_file", "modulename": "unic_pipeline.data_handler", "qualname": "ArrayHandler.cont_file", "kind": "variable", "doc": "<p>Continuum file.</p>\n", "annotation": ": Optional[pathlib.Path]", "default_value": "None"}, {"fullname": "unic_pipeline.data_handler.ArrayHandler.spws", "modulename": "unic_pipeline.data_handler", "qualname": "ArrayHandler.spws", "kind": "variable", "doc": "<p>List with spw values.</p>\n", "annotation": ": List[str]"}, {"fullname": "unic_pipeline.data_handler.ArrayHandler.spectra", "modulename": "unic_pipeline.data_handler", "qualname": "ArrayHandler.spectra", "kind": "variable", "doc": "<p>Stored spectra per SPW.</p>\n", "annotation": ": List[Tuple[astropy.units.quantity.Quantity]]"}, {"fullname": "unic_pipeline.data_handler.ArrayHandler.default_config", "modulename": "unic_pipeline.data_handler", "qualname": "ArrayHandler.default_config", "kind": "variable", "doc": "<p>Default configuration file name.</p>\n", "annotation": ": dataclasses.InitVar[typing.Optional[pathlib.Path]]", "default_value": "None"}, {"fullname": "unic_pipeline.data_handler.ArrayHandler.datadir", "modulename": "unic_pipeline.data_handler", "qualname": "ArrayHandler.datadir", "kind": "variable", "doc": "<p>Data directory.</p>\n", "annotation": ": dataclasses.InitVar[Path]", "default_value": "PosixPath(&#x27;/home/users/folguin/python_devel&#x27;)"}, {"fullname": "unic_pipeline.data_handler.ArrayHandler.field", "modulename": "unic_pipeline.data_handler", "qualname": "ArrayHandler.field", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "unic_pipeline.data_handler.ArrayHandler.uvcontinuum", "modulename": "unic_pipeline.data_handler", "qualname": "ArrayHandler.uvcontinuum", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "unic_pipeline.data_handler.ArrayHandler.uvcontsub", "modulename": "unic_pipeline.data_handler", "qualname": "ArrayHandler.uvcontsub", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "unic_pipeline.data_handler.ArrayHandler.get_antenna_diams", "modulename": "unic_pipeline.data_handler", "qualname": "ArrayHandler.get_antenna_diams", "kind": "function", "doc": "<p>Return the antenna diameters based on array name.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">array</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">astropy</span><span class=\"o\">.</span><span class=\"n\">units</span><span class=\"o\">.</span><span class=\"n\">quantity</span><span class=\"o\">.</span><span class=\"n\">Quantity</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "unic_pipeline.data_handler.ArrayHandler.update_spws", "modulename": "unic_pipeline.data_handler", "qualname": "ArrayHandler.update_spws", "kind": "function", "doc": "<p>Update the spws by reading the uvdata.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">uvtype</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "unic_pipeline.data_handler.ArrayHandler.read_config", "modulename": "unic_pipeline.data_handler", "qualname": "ArrayHandler.read_config", "kind": "function", "doc": "<p>Load a configuration file.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>default_config:</strong>  Optional; Default configuration scheme.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">default_config</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "unic_pipeline.data_handler.ArrayHandler.update_config", "modulename": "unic_pipeline.data_handler", "qualname": "ArrayHandler.update_config", "kind": "function", "doc": "<p>Update and write the configuration file.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>write:</strong>  Optional; Save to disk.</li>\n<li><strong>sections:</strong>  Sections to update with values.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">write</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">sections</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "unic_pipeline.data_handler.ArrayHandler.write_config", "modulename": "unic_pipeline.data_handler", "qualname": "ArrayHandler.write_config", "kind": "function", "doc": "<p>Write config file.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "unic_pipeline.data_handler.ArrayHandler.get_uvname", "modulename": "unic_pipeline.data_handler", "qualname": "ArrayHandler.get_uvname", "kind": "function", "doc": "<p>Get uvdata name from <code>uvtype</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">uvtype</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "unic_pipeline.data_handler.ArrayHandler.get_uvsuffix", "modulename": "unic_pipeline.data_handler", "qualname": "ArrayHandler.get_uvsuffix", "kind": "function", "doc": "<p>Get a suffix for file names from <code>uvtype</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">uvtype</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "unic_pipeline.data_handler.ArrayHandler.get_imagename", "modulename": "unic_pipeline.data_handler", "qualname": "ArrayHandler.get_imagename", "kind": "function", "doc": "<p>Generate an image name for intent.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>uvtype:</strong>  Type of uv data.</li>\n<li><strong>outdir:</strong>  Optional; Output directory.</li>\n<li><strong>section:</strong>  Optional; Config section of the image.</li>\n<li><strong>suffixes:</strong>  Optional; Additional <code>key_value</code> for file name.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">uvtype</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">outdir</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">section</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">suffixes</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span>:</span></span>", "funcdef": "def"}, {"fullname": "unic_pipeline.data_handler.ArrayHandler.get_spectral_ranges", "modulename": "unic_pipeline.data_handler", "qualname": "ArrayHandler.get_spectral_ranges", "kind": "function", "doc": "<p>Get spectral ranges from continuum file.</p>\n\n<p>The <code>cont.dat</code> contains the spectral ranges where the continuum is\ncalculated. The <code>invert</code> parameter allows to select the channels where\nlines are.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>suffix:</strong>  File name suffix.</li>\n<li><strong>invert:</strong>  Optional; Reverse channel selection?</li>\n<li><strong>mask_borders:</strong>  Optional; Mask 10 channels at beginning and end?</li>\n<li><strong>reume:</strong>  Optional; Resume where it was left last time?</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>A dictionary mapping SPW numbers with channel ranges.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">suffix</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">invert</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">mask_borders</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">resume</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "unic_pipeline.data_handler.ArrayHandler.get_image_scales", "modulename": "unic_pipeline.data_handler", "qualname": "ArrayHandler.get_image_scales", "kind": "function", "doc": "<p>Get cell and image sizes.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>uvtype:</strong>  Optional; Type of uvdata to image.</li>\n<li><strong>spw:</strong>  Optional; Select spectral window.</li>\n<li><strong>beam_oversample:</strong>  Optional; Number of pixels per beam.</li>\n<li><strong>sigfig:</strong>  Optional; Significant figures of the pixel size.</li>\n<li><strong>pbcoverage:</strong>  Optional; Number of PB sizes for the image size.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>CASA compatible cell size and image size.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">uvtype</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">spw</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">beam_oversample</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">5</span>,</span><span class=\"param\">\t<span class=\"n\">sigfig</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>,</span><span class=\"param\">\t<span class=\"n\">pbcoverage</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">2.0</span>,</span><span class=\"param\">\t<span class=\"n\">section</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;imaging&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "unic_pipeline.data_handler.ArrayHandler.clean_data", "modulename": "unic_pipeline.data_handler", "qualname": "ArrayHandler.clean_data", "kind": "function", "doc": "<p>Run tclean on input or stored uvdata.</p>\n\n<p>Arguments given under <code>tclean_args</code> replace the values from <code>config</code>.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>section:</strong>  Configuration section.</li>\n<li><strong>uvtype:</strong>  Type of uvdata to clean.</li>\n<li><strong>imagename:</strong>  Optional; Image directory path.</li>\n<li><strong>nproc:</strong>  Optional; Number of processors for parallel clean.</li>\n<li><strong>auto_threshold:</strong>  Optional; Calculate threshold from noise in initial\ndirty image?</li>\n<li><strong>export_fits:</strong>  Optional; Export image to FITS file?</li>\n<li><strong>resume:</strong>  Optional; Resume where it was left?</li>\n<li><strong>threshold_opt:</strong>  Optional; Threshold config option for resume.</li>\n<li><strong>plot_results:</strong>  Optional; plot image, residual and masks?</li>\n<li><strong>tclean_args:</strong>  Optional; Additional arguments for tclean.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>The image file name.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">section</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">uvtype</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">imagename</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">nproc</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">5</span>,</span><span class=\"param\">\t<span class=\"n\">auto_threshold</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">export_fits</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">resume</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">threshold_opt</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">plot_results</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">tclean_args</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span>:</span></span>", "funcdef": "def"}, {"fullname": "unic_pipeline.data_handler.ArrayHandler.clean_per_spw", "modulename": "unic_pipeline.data_handler", "qualname": "ArrayHandler.clean_per_spw", "kind": "function", "doc": "<p>Run <code>tclean</code> on all spws.</p>\n\n<p>Arguments given under <code>tclean_args</code> replace the values from <code>config</code>.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>section:</strong>  Configuration section.</li>\n<li><strong>uvtype:</strong>  Type of uvdata to clean.</li>\n<li><strong>outdir:</strong>  Optional; Output directory path.</li>\n<li><strong>nproc:</strong>  Optional; Number of processors for parallel clean.</li>\n<li><strong>resume:</strong>  Optional; Resume where it was left?</li>\n<li><strong>get_spectra:</strong>  Optional; Extract spectra from cubes per spw?</li>\n<li><strong>auto_threshold:</strong>  Optional; Calculate threshold from noise in initial\ndirty image?</li>\n<li><strong>export_fits:</strong>  Optional; Export image to FITS file?</li>\n<li><strong>plot_results:</strong>  Optional; Plot spectra, image, residual and masks?</li>\n<li><strong>tclean_args:</strong>  Optional; Additional arguments for tclean.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>A list with the image file names.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">section</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">uvtype</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">outdir</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">nproc</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">5</span>,</span><span class=\"param\">\t<span class=\"n\">resume</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">auto_threshold</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">export_fits</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">get_spectra</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">plot_results</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">tclean_args</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "unic_pipeline.data_handler.ArrayHandler.contsub", "modulename": "unic_pipeline.data_handler", "qualname": "ArrayHandler.contsub", "kind": "function", "doc": "<p>Run <code>uvcontsub</code> to obtain continuum subtracted visibilities.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>section:</strong>  Optional; Configuration section.</li>\n<li><strong>resume:</strong>  Optional; Continue from where it was left?</li>\n<li><strong>plot_selection:</strong>  Optional; Plot selection for <code>fitspec</code>?</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">section</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;contsub&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">resume</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">plot_selection</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "unic_pipeline.data_handler.ArrayHandler.continuum_vis", "modulename": "unic_pipeline.data_handler", "qualname": "ArrayHandler.continuum_vis", "kind": "function", "doc": "<p>Generate continuum visibilities.</p>\n\n<p>It generates 2 visibility sets:</p>\n\n<ul>\n<li>Average of all the channels using the input width.</li>\n<li>Average of the line free channels using the <code>cont_file</code> and width.</li>\n</ul>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>section:</strong>  Optional; Configuration section.</li>\n<li><strong>resume:</strong>  Optional; Continue from where it was left?</li>\n<li><strong>plot_selection:</strong>  Optional; Plot selection for flagged channels?</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>The line-free and averaged MS file names.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">section</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;continuum&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">resume</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">plot_selection</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "unic_pipeline.data_handler.FieldManager", "modulename": "unic_pipeline.data_handler", "qualname": "FieldManager", "kind": "class", "doc": "<p>Manage field information for different array configurations.</p>\n"}, {"fullname": "unic_pipeline.data_handler.FieldManager.__init__", "modulename": "unic_pipeline.data_handler", "qualname": "FieldManager.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">log</span><span class=\"p\">:</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">Logger</span>,</span><span class=\"param\">\t<span class=\"n\">resume</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">original</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">factory</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">split</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">factory</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">data_handler</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">unic_pipeline</span><span class=\"o\">.</span><span class=\"n\">data_handler</span><span class=\"o\">.</span><span class=\"n\">ArrayHandler</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">factory</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">field</span><span class=\"p\">:</span> <span class=\"n\">dataclasses</span><span class=\"o\">.</span><span class=\"n\">InitVar</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">original_uvdata</span><span class=\"p\">:</span> <span class=\"n\">dataclasses</span><span class=\"o\">.</span><span class=\"n\">InitVar</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">datadir</span><span class=\"p\">:</span> <span class=\"n\">dataclasses</span><span class=\"o\">.</span><span class=\"n\">InitVar</span><span class=\"p\">[</span><span class=\"n\">Path</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">function</span> <span class=\"n\">FieldManager</span><span class=\"o\">.</span><span class=\"n\">datadir</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">default_config</span><span class=\"p\">:</span> <span class=\"n\">dataclasses</span><span class=\"o\">.</span><span class=\"n\">InitVar</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">configfile</span><span class=\"p\">:</span> <span class=\"n\">dataclasses</span><span class=\"o\">.</span><span class=\"n\">InitVar</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">cont_file</span><span class=\"p\">:</span> <span class=\"n\">dataclasses</span><span class=\"o\">.</span><span class=\"n\">InitVar</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "unic_pipeline.data_handler.FieldManager.log", "modulename": "unic_pipeline.data_handler", "qualname": "FieldManager.log", "kind": "variable", "doc": "<p>Logging object.</p>\n", "annotation": ": logging.Logger"}, {"fullname": "unic_pipeline.data_handler.FieldManager.resume", "modulename": "unic_pipeline.data_handler", "qualname": "FieldManager.resume", "kind": "variable", "doc": "<p>Resume or delete already created data?</p>\n", "annotation": ": bool", "default_value": "False"}, {"fullname": "unic_pipeline.data_handler.FieldManager.original", "modulename": "unic_pipeline.data_handler", "qualname": "FieldManager.original", "kind": "variable", "doc": "<p>Original data for each array.</p>\n", "annotation": ": Dict[str, Tuple[pathlib.Path]]"}, {"fullname": "unic_pipeline.data_handler.FieldManager.split", "modulename": "unic_pipeline.data_handler", "qualname": "FieldManager.split", "kind": "variable", "doc": "<p>Split data for each array.</p>\n", "annotation": ": Dict[str, Tuple[pathlib.Path]]"}, {"fullname": "unic_pipeline.data_handler.FieldManager.data_handler", "modulename": "unic_pipeline.data_handler", "qualname": "FieldManager.data_handler", "kind": "variable", "doc": "<p>Data handler.</p>\n", "annotation": ": Dict[str, unic_pipeline.data_handler.ArrayHandler]"}, {"fullname": "unic_pipeline.data_handler.FieldManager.field", "modulename": "unic_pipeline.data_handler", "qualname": "FieldManager.field", "kind": "variable", "doc": "<p>Field name.</p>\n", "annotation": ": dataclasses.InitVar[typing.Optional[str]]", "default_value": "None"}, {"fullname": "unic_pipeline.data_handler.FieldManager.original_uvdata", "modulename": "unic_pipeline.data_handler", "qualname": "FieldManager.original_uvdata", "kind": "variable", "doc": "<p>Original data.</p>\n", "annotation": ": dataclasses.InitVar[typing.Optional[pathlib.Path]]", "default_value": "None"}, {"fullname": "unic_pipeline.data_handler.FieldManager.datadir", "modulename": "unic_pipeline.data_handler", "qualname": "FieldManager.datadir", "kind": "function", "doc": "<p>Data directory.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">array</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span>:</span></span>", "funcdef": "def"}, {"fullname": "unic_pipeline.data_handler.FieldManager.default_config", "modulename": "unic_pipeline.data_handler", "qualname": "FieldManager.default_config", "kind": "variable", "doc": "<p>Default configuration file name.</p>\n", "annotation": ": dataclasses.InitVar[typing.Optional[pathlib.Path]]", "default_value": "None"}, {"fullname": "unic_pipeline.data_handler.FieldManager.configfile", "modulename": "unic_pipeline.data_handler", "qualname": "FieldManager.configfile", "kind": "variable", "doc": "<p>Configuration file name.</p>\n", "annotation": ": dataclasses.InitVar[typing.Optional[pathlib.Path]]", "default_value": "None"}, {"fullname": "unic_pipeline.data_handler.FieldManager.cont_file", "modulename": "unic_pipeline.data_handler", "qualname": "FieldManager.cont_file", "kind": "variable", "doc": "<p>Continuum file.</p>\n", "annotation": ": dataclasses.InitVar[typing.Optional[pathlib.Path]]", "default_value": "None"}, {"fullname": "unic_pipeline.data_handler.FieldManager.name", "modulename": "unic_pipeline.data_handler", "qualname": "FieldManager.name", "kind": "variable", "doc": "<p>Name associated to the field.</p>\n"}, {"fullname": "unic_pipeline.data_handler.FieldManager.arrays", "modulename": "unic_pipeline.data_handler", "qualname": "FieldManager.arrays", "kind": "variable", "doc": "<p>Names of stored arrays.</p>\n", "annotation": ": Tuple[str]"}, {"fullname": "unic_pipeline.data_handler.FieldManager.append_data", "modulename": "unic_pipeline.data_handler", "qualname": "FieldManager.append_data", "kind": "function", "doc": "<p>Append or update data from original calibrated MS.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>original_uvdata:</strong>  Original uv data.</li>\n<li><strong>field:</strong>  Optional; Field name.</li>\n<li><strong>default_config:</strong>  Optional; Default configuration file name.</li>\n<li><strong>configfile:</strong>  Optional; Configuration file name.</li>\n<li><strong>cont_file:</strong>  Optional; Continuum file name.</li>\n<li><strong>datadir:</strong>  Optional; Data directory.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">original_uvdata</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span>,</span><span class=\"param\">\t<span class=\"n\">field</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">default_config</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">configfile</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">cont_file</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">datadir</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "unic_pipeline.data_handler.FieldManager.get_uvnames", "modulename": "unic_pipeline.data_handler", "qualname": "FieldManager.get_uvnames", "kind": "function", "doc": "<p>Obtain uv data file names for an array.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>arrays:</strong>  Arrays to use.</li>\n<li><strong>uvtype:</strong>  Type of uv data (<code>'', 'continuum', 'uvcontsub'</code>).</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">arrays</span><span class=\"p\">:</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>, </span><span class=\"param\"><span class=\"n\">uvtype</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "unic_pipeline.data_handler.FieldManager.split_field", "modulename": "unic_pipeline.data_handler", "qualname": "FieldManager.split_field", "kind": "function", "doc": "<p>Split field from input uvdata.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>array:</strong>  Name of the array.</li>\n<li><strong>uvdata:</strong>  MS file name.</li>\n<li><strong>splitvis:</strong>  Output MS file name.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">array</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">uvdata</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span>, </span><span class=\"param\"><span class=\"n\">splitvis</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "unic_pipeline.data_handler.FieldManager.concat_data", "modulename": "unic_pipeline.data_handler", "qualname": "FieldManager.concat_data", "kind": "function", "doc": "<p>Concatenate stored data per array.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "unic_pipeline.data_handler.FieldManager.array_imaging", "modulename": "unic_pipeline.data_handler", "qualname": "FieldManager.array_imaging", "kind": "function", "doc": "<p>Image an array.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>section:</strong>  Configuration section with <code>tclean</code> parameters.</li>\n<li><strong>uvtype:</strong>  Type of uv data to clean.</li>\n<li><strong>arrays:</strong>  Optional; Array to image.</li>\n<li><strong>outdir:</strong>  Optional; Output directory.</li>\n<li><strong>nproc:</strong>  Optional; Number of parallel processes for cleaning.</li>\n<li><strong>auto_threshold:</strong>  Optional; Calculate threshold from noise in initial\ndirty image?</li>\n<li><strong>per_spw:</strong>  Optional; Clean each SPW individually?</li>\n<li><strong>get_spectra:</strong>  Optional; Extract spectra from cubes per SPW?</li>\n<li><strong>export_fits:</strong>  Optional; Export image to FITS file?</li>\n<li><strong>plot_results:</strong>  Optional; Plot image, residual and masks?</li>\n<li><strong>compare_to:</strong>  Optional; Compare image with this execution?</li>\n<li><strong>tclean_args:</strong>  Optional; Additional <code>casatasks.tclean</code> arguments.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">section</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">uvtype</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">arrays</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">outdir</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">nproc</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">5</span>,</span><span class=\"param\">\t<span class=\"n\">auto_threshold</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">per_spw</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">get_spectra</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">export_fits</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">plot_results</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">compare_to</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">tclean_args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "unic_pipeline.data_handler.FieldManager.contsub_visibilities", "modulename": "unic_pipeline.data_handler", "qualname": "FieldManager.contsub_visibilities", "kind": "function", "doc": "<p>Compute continuum subtracted visibilities.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>dirty_images:</strong>  Optional; Compute dirty images?</li>\n<li><strong>nproc:</strong>  Optional; Number of parallel processes for cleaning.</li>\n<li><strong>get_spectra:</strong>  Optional; Extract spectra from dirty cubes?</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">dirty_images</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">nproc</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">5</span>,</span><span class=\"param\">\t<span class=\"n\">get_spectra</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "unic_pipeline.data_handler.FieldManager.continuum_visibilities", "modulename": "unic_pipeline.data_handler", "qualname": "FieldManager.continuum_visibilities", "kind": "function", "doc": "<p>Compute continuum visibilities for data.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>control_image:</strong>  Optional; Calculate control image?</li>\n<li><strong>nproc:</strong>  Optional; Number of parallel processes for cleaning.</li>\n<li><strong>outdir:</strong>  Optional; Output directory.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">control_image</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">nproc</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">5</span>,</span><span class=\"param\">\t<span class=\"n\">outdir</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "unic_pipeline.data_handler.FieldManager.combine_arrays", "modulename": "unic_pipeline.data_handler", "qualname": "FieldManager.combine_arrays", "kind": "function", "doc": "<p>Combine uv data of different arrays.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">arrays</span><span class=\"p\">:</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">uvtypes</span><span class=\"p\">:</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s1\">&#39;uvcontsub&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;continuum&#39;</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">default_config</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">datadir</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">control_images</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">nproc</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">5</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "unic_pipeline.data_handler.FieldManager.write_configs", "modulename": "unic_pipeline.data_handler", "qualname": "FieldManager.write_configs", "kind": "function", "doc": "<p>Write configs to disk.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "unic_pipeline.data_handler.DataManager", "modulename": "unic_pipeline.data_handler", "qualname": "DataManager", "kind": "class", "doc": "<p>Manage pipeline data.</p>\n\n<p>It associates each field with a <code>FieldManager</code>.</p>\n", "bases": "typing.Dict"}, {"fullname": "unic_pipeline.data_handler.DataManager.log", "modulename": "unic_pipeline.data_handler", "qualname": "DataManager.log", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "unic_pipeline.data_handler.DataManager.from_uvdata", "modulename": "unic_pipeline.data_handler", "qualname": "DataManager.from_uvdata", "kind": "function", "doc": "<p>Generate a <code>DataManager</code> from input MSs.</p>\n\n<p>It uses the input uvdata to find target fields and generates a\nconfiguration file for each.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>uvdata:</strong>  MS file name(s).</li>\n<li><strong>default_config:</strong>  A default configuration skeleton.</li>\n<li><strong>log:</strong>  A <code>logging</code> object.</li>\n<li><strong>datadir:</strong>  Optional; Where the data generated will be stored.</li>\n<li><strong>cont:</strong>  Optional; A list of continuum files for each <code>uvdata</code>.</li>\n<li><strong>resume:</strong>  Optional; Continue from where it was left?</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">cls</span>,</span><span class=\"param\">\t<span class=\"n\">uvdata</span><span class=\"p\">:</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">default_config</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span>,</span><span class=\"param\">\t<span class=\"n\">log</span><span class=\"p\">:</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">Logger</span>,</span><span class=\"param\">\t<span class=\"n\">datadir</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span> <span class=\"o\">=</span> <span class=\"n\">PosixPath</span><span class=\"p\">(</span><span class=\"s1\">&#39;.&#39;</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">cont</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">resume</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "unic_pipeline.data_handler.DataManager.from_configs", "modulename": "unic_pipeline.data_handler", "qualname": "DataManager.from_configs", "kind": "function", "doc": "<p>Generate a <code>DataManager</code> from input configuration files.</p>\n\n<p>At the moment it assumes the data is ready for processesing.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>configfiles:</strong>  A list of configuration files.</li>\n<li><strong>log:</strong>  A <code>logging</code> object.</li>\n<li><strong>datadir:</strong>  Optional; Where the data generated will be stored.</li>\n<li><strong>cont:</strong>  Optional; A list of continuum files for each <code>uvdata</code>.</li>\n<li><strong>resume:</strong>  Optional; Continue from where it was left?</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">cls</span>,</span><span class=\"param\">\t<span class=\"n\">configfiles</span><span class=\"p\">:</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">log</span><span class=\"p\">:</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">Logger</span>,</span><span class=\"param\">\t<span class=\"n\">datadir</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span> <span class=\"o\">=</span> <span class=\"n\">PosixPath</span><span class=\"p\">(</span><span class=\"s1\">&#39;.&#39;</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">cont</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">resume</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "unic_pipeline.logger", "modulename": "unic_pipeline.logger", "kind": "module", "doc": "<p>Logging tools and classes.</p>\n\n<p>This is a compilation of functions for loading and configuring the logging\nsystem. It also implements a <code>LoggedObject</code> class that can be inherited in\norder to implement logging for the class.</p>\n"}, {"fullname": "unic_pipeline.logger.get_level", "modulename": "unic_pipeline.logger", "qualname": "get_level", "kind": "function", "doc": "<p>Convert to numeric logging level.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">loglevel</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "unic_pipeline.logger.get_stdout_format", "modulename": "unic_pipeline.logger", "qualname": "get_stdout_format", "kind": "function", "doc": "<p>Determines the stdout format.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>level:</strong>  optional; logging level.</li>\n<li><strong>timestamp:</strong>  optional; include timestamp?</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">level</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">20</span>, </span><span class=\"param\"><span class=\"n\">timestamp</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "unic_pipeline.logger.get_stdout_handler", "modulename": "unic_pipeline.logger", "qualname": "get_stdout_handler", "kind": "function", "doc": "<p>Create an standard output handler with the given log level.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>level:</strong>  logging level.</li>\n<li><strong>timestamp:</strong>  optional; add time stamp to default format.</li>\n<li><strong>fmt:</strong>  optional; text format.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">level</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">timestamp</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">fmt</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">StreamHandler</span>:</span></span>", "funcdef": "def"}, {"fullname": "unic_pipeline.logger.get_file_handler", "modulename": "unic_pipeline.logger", "qualname": "get_file_handler", "kind": "function", "doc": "<p>Create a file logging handler.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>level:</strong>  logging level.</li>\n<li><strong>filename:</strong>  logging file name</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">level</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">filename</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">timestamp</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">max_bytes</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">5242880</span>,</span><span class=\"param\">\t<span class=\"n\">backup_count</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">5</span>,</span><span class=\"param\">\t<span class=\"n\">fmt</span><span class=\"p\">:</span> <span class=\"n\">Optional</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">handlers</span><span class=\"o\">.</span><span class=\"n\">RotatingFileHandler</span>:</span></span>", "funcdef": "def"}, {"fullname": "unic_pipeline.logger.get_logger", "modulename": "unic_pipeline.logger", "qualname": "get_logger", "kind": "function", "doc": "<p>Creates a new logger.</p>\n\n<p>Verbose levels overwrite the other parameter values. Accepted <code>verbose</code>\nvalues are:</p>\n\n<ul>\n<li><code>None</code>: use the other keyword arguments.</li>\n<li><code>v</code>: basic logging with <code>INFO</code> level for stdout and <code>DEBUG</code> level for\nfile logging.</li>\n<li><code>vv</code>: looging with <code>DEBUG</code> level for stdout and file logging.</li>\n<li><code>vvv</code>: same as verbose <code>vv</code> but add a timestamp to the file name and add\ntime to the stdout log.</li>\n</ul>\n\n<p>Additional appereances of the character <code>v</code> will be ignored.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>name:</strong>  name of the logger.</li>\n<li><strong>filename:</strong>  optional; file name of the log.</li>\n<li><strong>verbose:</strong>  optional; verbose level.</li>\n<li><strong>timestamp:</strong>  optional; add timestamp to log file name.</li>\n<li><strong>stdoutlevel:</strong>  optional; logging level fot std output logging.</li>\n<li><strong>filelevel:</strong>  optional; logging level for file logging.</li>\n<li><strong>max_bytes:</strong>  optional; maximum size of logging file in bytes.</li>\n<li><strong>backup_count:</strong>  optional; maximum number of log files to rotate.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">filename</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">timestamp</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">stdoutlevel</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">20</span>,</span><span class=\"param\">\t<span class=\"n\">filelevel</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>,</span><span class=\"param\">\t<span class=\"n\">max_bytes</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">5242880</span>,</span><span class=\"param\">\t<span class=\"n\">backup_count</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">5</span></span><span class=\"return-annotation\">) -> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">Logger</span>:</span></span>", "funcdef": "def"}, {"fullname": "unic_pipeline.logger.get_stdout_logger", "modulename": "unic_pipeline.logger", "qualname": "get_stdout_logger", "kind": "function", "doc": "<p>Creates a new standard output logger.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>name:</strong>  name of the logger.</li>\n<li><strong>verbose:</strong>  optional; verbose level.</li>\n<li><strong>timestamp:</strong>  optional; add timestamp to log file name.</li>\n<li><strong>level:</strong>  optional; logging level fot std output logging.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">timestamp</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">level</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">20</span></span><span class=\"return-annotation\">) -> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">Logger</span>:</span></span>", "funcdef": "def"}, {"fullname": "unic_pipeline.logger.update_logger", "modulename": "unic_pipeline.logger", "qualname": "update_logger", "kind": "function", "doc": "<p>Update logger handlers.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>logger:</strong>  logger instance.</li>\n<li><strong>filename:</strong>  optional; file name for new file handler.</li>\n<li><strong>verbose:</strong>  optional; update logging levels.</li>\n<li><strong>timestamp:</strong>  optional; default timestamp values for new/updated handlers.</li>\n<li><strong>stdoutlevel:</strong>  optional; change standard output level.</li>\n<li><strong>filelevel:</strong>  optional; change file level.</li>\n<li><strong>max_bytes:</strong>  optional; maximum size of logging file in bytes.</li>\n<li><strong>backup_count:</strong>  optional; maximum number of log files to rotate.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>An updated logger instance.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">logger</span><span class=\"p\">:</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">Logger</span>,</span><span class=\"param\">\t<span class=\"n\">filename</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">timestamp</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">stdoutlevel</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">20</span>,</span><span class=\"param\">\t<span class=\"n\">filelevel</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>,</span><span class=\"param\">\t<span class=\"n\">max_bytes</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">5242880</span>,</span><span class=\"param\">\t<span class=\"n\">backup_count</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">5</span></span><span class=\"return-annotation\">) -> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">Logger</span>:</span></span>", "funcdef": "def"}, {"fullname": "unic_pipeline.logger.LoggedObject", "modulename": "unic_pipeline.logger", "qualname": "LoggedObject", "kind": "class", "doc": "<p>Object for logging information to stdout.</p>\n\n<p>The attribute <code>log</code> can be updated and change the verbose level and other\noptions by initializing the object. Else the <code>log</code> will print to the\nstandard output. The logging can be disable if the <code>enabled</code> attribute is\nset to <code>False</code>.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>log:</strong>  logger object.</li>\n<li><strong>enabled:</strong>  enable or disable logging.</li>\n</ul>\n"}, {"fullname": "unic_pipeline.logger.LoggedObject.__init__", "modulename": "unic_pipeline.logger", "qualname": "LoggedObject.__init__", "kind": "function", "doc": "<p>Initialize the object and apply options.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "unic_pipeline.logger.LoggedObject.enabled", "modulename": "unic_pipeline.logger", "qualname": "LoggedObject.enabled", "kind": "variable", "doc": "<p></p>\n", "default_value": "True"}, {"fullname": "unic_pipeline.logger.LoggedObject.info", "modulename": "unic_pipeline.logger", "qualname": "LoggedObject.info", "kind": "function", "doc": "<p>Log an <code>INFO</code> message.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">message</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "unic_pipeline.logger.LoggedObject.debug", "modulename": "unic_pipeline.logger", "qualname": "LoggedObject.debug", "kind": "function", "doc": "<p>Log a <code>DEBUG</code> message.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">message</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "unic_pipeline.logger.LoggedObject.warn", "modulename": "unic_pipeline.logger", "qualname": "LoggedObject.warn", "kind": "function", "doc": "<p>Log a <code>DEBUG</code> message.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">message</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "unic_pipeline.logger.LoggedObject.error", "modulename": "unic_pipeline.logger", "qualname": "LoggedObject.error", "kind": "function", "doc": "<p>Log a <code>DEBUG</code> message.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">message</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "unic_pipeline.plotting", "modulename": "unic_pipeline.plotting", "kind": "module", "doc": "<p>Plotting tools.</p>\n"}, {"fullname": "unic_pipeline.plotting.plot_imaging_products", "modulename": "unic_pipeline.plotting", "qualname": "plot_imaging_products", "kind": "function", "doc": "<p>Plot imaging results.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">imagename</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span>,</span><span class=\"param\">\t<span class=\"n\">filename</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span>,</span><span class=\"param\">\t<span class=\"n\">deconvolver</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">mask_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">threshold</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">chans</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "unic_pipeline.plotting.plot_comparison", "modulename": "unic_pipeline.plotting", "qualname": "plot_comparison", "kind": "function", "doc": "<p>Plot a comparison between images.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">reference</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span>,</span><span class=\"param\">\t<span class=\"n\">imagename</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span>,</span><span class=\"param\">\t<span class=\"n\">filename</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "unic_pipeline.plotting.plot_imaging_spectra", "modulename": "unic_pipeline.plotting", "qualname": "plot_imaging_spectra", "kind": "function", "doc": "<p>Plot spectra and mask.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">imagename</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span>,</span><span class=\"param\">\t<span class=\"n\">plotname</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span>,</span><span class=\"param\">\t<span class=\"n\">threshold</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">masking</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "unic_pipeline.run_tclean_parallel", "modulename": "unic_pipeline.run_tclean_parallel", "kind": "module", "doc": "<p>Script to run tclean in parallel with mpicasa.</p>\n"}, {"fullname": "unic_pipeline.run_tclean_parallel.main", "modulename": "unic_pipeline.run_tclean_parallel", "qualname": "main", "kind": "function", "doc": "<p>Run tclean.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"nb\">list</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "unic_pipeline.spectrum_tools", "modulename": "unic_pipeline.spectrum_tools", "kind": "module", "doc": "<p>Tools for working with spectrum data.</p>\n"}, {"fullname": "unic_pipeline.spectrum_tools.extract_spectrum", "modulename": "unic_pipeline.spectrum_tools", "qualname": "extract_spectrum", "kind": "function", "doc": "<p>Extract spectrum at the position of the maximum.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">image</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span>,</span><span class=\"param\">\t<span class=\"n\">loc</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">astropy</span><span class=\"o\">.</span><span class=\"n\">units</span><span class=\"o\">.</span><span class=\"n\">quantity</span><span class=\"o\">.</span><span class=\"n\">Quantity</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "unic_pipeline.spectrum_tools.freq_to_chan", "modulename": "unic_pipeline.spectrum_tools", "qualname": "freq_to_chan", "kind": "function", "doc": "<p>Generate functions to convert frequencies in channels and viceversa.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">freq</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_typing</span><span class=\"o\">.</span><span class=\"n\">_array_like</span><span class=\"o\">.</span><span class=\"n\">_SupportsArray</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]],</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_typing</span><span class=\"o\">.</span><span class=\"n\">_nested_sequence</span><span class=\"o\">.</span><span class=\"n\">_NestedSequence</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_typing</span><span class=\"o\">.</span><span class=\"n\">_array_like</span><span class=\"o\">.</span><span class=\"n\">_SupportsArray</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]]],</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">complex</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_typing</span><span class=\"o\">.</span><span class=\"n\">_nested_sequence</span><span class=\"o\">.</span><span class=\"n\">_NestedSequence</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">complex</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">]]]</span>,</span><span class=\"param\">\t<span class=\"n\">chan</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_typing</span><span class=\"o\">.</span><span class=\"n\">_array_like</span><span class=\"o\">.</span><span class=\"n\">_SupportsArray</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]],</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_typing</span><span class=\"o\">.</span><span class=\"n\">_nested_sequence</span><span class=\"o\">.</span><span class=\"n\">_NestedSequence</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_typing</span><span class=\"o\">.</span><span class=\"n\">_array_like</span><span class=\"o\">.</span><span class=\"n\">_SupportsArray</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]]],</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">complex</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_typing</span><span class=\"o\">.</span><span class=\"n\">_nested_sequence</span><span class=\"o\">.</span><span class=\"n\">_NestedSequence</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">complex</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">]]]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "unic_pipeline.spectrum_tools.plot_spectrum", "modulename": "unic_pipeline.spectrum_tools", "qualname": "plot_spectrum", "kind": "function", "doc": "<p>Plot a spectrum.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">spectrum</span><span class=\"p\">:</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">astropy</span><span class=\"o\">.</span><span class=\"n\">units</span><span class=\"o\">.</span><span class=\"n\">quantity</span><span class=\"o\">.</span><span class=\"n\">Quantity</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">filename</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span>,</span><span class=\"param\">\t<span class=\"n\">residual</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">astropy</span><span class=\"o\">.</span><span class=\"n\">units</span><span class=\"o\">.</span><span class=\"n\">quantity</span><span class=\"o\">.</span><span class=\"n\">Quantity</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">selection</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">functions</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">title</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">hline</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">astropy</span><span class=\"o\">.</span><span class=\"n\">units</span><span class=\"o\">.</span><span class=\"n\">quantity</span><span class=\"o\">.</span><span class=\"n\">Quantity</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "unic_pipeline.spectrum_tools.plot_spectral_selection", "modulename": "unic_pipeline.spectrum_tools", "qualname": "plot_spectral_selection", "kind": "function", "doc": "<p>Plot spectrum and data selection.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">spectra</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">astropy</span><span class=\"o\">.</span><span class=\"n\">units</span><span class=\"o\">.</span><span class=\"n\">quantity</span><span class=\"o\">.</span><span class=\"n\">Quantity</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">selection</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]]]</span>,</span><span class=\"param\">\t<span class=\"n\">uvdata</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span>,</span><span class=\"param\">\t<span class=\"n\">spws</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">outdir</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span>,</span><span class=\"param\">\t<span class=\"n\">suffix</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "unic_pipeline.unic", "modulename": "unic_pipeline.unic", "kind": "module", "doc": "<p>ALMA-UNIC pipeline.</p>\n\n<p>The pipeline is designed to process data for the ALMA-UNIC LP. It performs\nseveral steps:</p>\n\n<ul>\n<li><code>split</code>: It prepares the data starting from the original calibrated data or\nfrom configuration files. It takes the original data, finds sources for\nscience and splits these data into individual MS per array (7m, 12m). It\nconcatenates data with multiple EBs. If started from <code>uvdata</code>, then it\ngenerates a configuration file per array collecting information per step\nusing the default configuration for ALMA-UNIC as a skeleton.</li>\n<li><code>dirty_cubes</code>: Calculate dirty cubes from the split data.</li>\n<li><code>continuum</code>: It takes a <code>cont.dat</code> (or similar) file and extracts the\nfrequency ranges for continuum calculation. It then converts it to channel\nranges of flagged channels (channel with lines). Additionally, it\ndetermines an optimum channel binning for averaging, which are then used to\ncompute the continuum visibilities. Two sets of visibilities are produced,\na line-free set (files ending in <code>.cont.ms</code>) and set without line flagging\n(files ending in <code>.cont_all.ms</code>).</li>\n<li><code>contsub</code>: It uses the frequency ranges for continuum calculation to\ncompute continuum subtracted visibilities.</li>\n<li><code>combine_arrays</code>: If 7m and 12m data are given, then a concatenated array\nis produced for the line-free continuum and continuum subtracted\nvisibilities. It also generates a configuration file for the combined\narray.</li>\n<li><code>clean_cont</code>: Clean continuum to produce science-ready images.</li>\n</ul>\n"}, {"fullname": "unic_pipeline.unic.prep_data", "modulename": "unic_pipeline.unic", "qualname": "prep_data", "kind": "function", "doc": "<p>Prepare data for processing.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"n\">argparse</span><span class=\"o\">.</span><span class=\"n\">Namespace</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "unic_pipeline.unic.dirty_cubes", "modulename": "unic_pipeline.unic", "qualname": "dirty_cubes", "kind": "function", "doc": "<p>Calculate dirty cubes.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"n\">argparse</span><span class=\"o\">.</span><span class=\"n\">Namespace</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "unic_pipeline.unic.continuum", "modulename": "unic_pipeline.unic", "qualname": "continuum", "kind": "function", "doc": "<p>Calculate and image the continuum visibilities.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"n\">argparse</span><span class=\"o\">.</span><span class=\"n\">Namespace</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "unic_pipeline.unic.contsub", "modulename": "unic_pipeline.unic", "qualname": "contsub", "kind": "function", "doc": "<p>Calculate the continuum subtracted visibilities.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"n\">argparse</span><span class=\"o\">.</span><span class=\"n\">Namespace</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "unic_pipeline.unic.combine_arrays", "modulename": "unic_pipeline.unic", "qualname": "combine_arrays", "kind": "function", "doc": "<p>Combine 7m and 12m data.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"n\">argparse</span><span class=\"o\">.</span><span class=\"n\">Namespace</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "unic_pipeline.unic.clean_continuum", "modulename": "unic_pipeline.unic", "qualname": "clean_continuum", "kind": "function", "doc": "<p>Clean continuum for different robust and arrays.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"n\">argparse</span><span class=\"o\">.</span><span class=\"n\">Namespace</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "unic_pipeline.unic.clean_cubes", "modulename": "unic_pipeline.unic", "qualname": "clean_cubes", "kind": "function", "doc": "<p>Clean continuum for different robust and arrays.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"n\">argparse</span><span class=\"o\">.</span><span class=\"n\">Namespace</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "unic_pipeline.unic.unic", "modulename": "unic_pipeline.unic", "qualname": "unic", "kind": "function", "doc": "<p>Run the main UNIC pipeline.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "unic_pipeline.utils", "modulename": "unic_pipeline.utils", "kind": "module", "doc": "<p>Utility functions.</p>\n"}, {"fullname": "unic_pipeline.utils.get_metadata", "modulename": "unic_pipeline.utils", "qualname": "get_metadata", "kind": "function", "doc": "<p>Read metadata from MS.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">uvdata</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "unic_pipeline.utils.gaussian_primary_beam", "modulename": "unic_pipeline.utils", "qualname": "gaussian_primary_beam", "kind": "function", "doc": "<p>Calculate the angular size of a Gaussian primary beam.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">freq</span><span class=\"p\">:</span> <span class=\"n\">astropy</span><span class=\"o\">.</span><span class=\"n\">units</span><span class=\"o\">.</span><span class=\"n\">quantity</span><span class=\"o\">.</span><span class=\"n\">Quantity</span>,</span><span class=\"param\">\t<span class=\"n\">diameter</span><span class=\"p\">:</span> <span class=\"n\">astropy</span><span class=\"o\">.</span><span class=\"n\">units</span><span class=\"o\">.</span><span class=\"n\">quantity</span><span class=\"o\">.</span><span class=\"n\">Quantity</span></span><span class=\"return-annotation\">) -> <span class=\"n\">astropy</span><span class=\"o\">.</span><span class=\"n\">units</span><span class=\"o\">.</span><span class=\"n\">quantity</span><span class=\"o\">.</span><span class=\"n\">Quantity</span>:</span></span>", "funcdef": "def"}, {"fullname": "unic_pipeline.utils.gaussian_beam", "modulename": "unic_pipeline.utils", "qualname": "gaussian_beam", "kind": "function", "doc": "<p>Estimate the synthetize Gaussian beam size.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">freq</span><span class=\"p\">:</span> <span class=\"n\">astropy</span><span class=\"o\">.</span><span class=\"n\">units</span><span class=\"o\">.</span><span class=\"n\">quantity</span><span class=\"o\">.</span><span class=\"n\">Quantity</span>,</span><span class=\"param\">\t<span class=\"n\">baseline</span><span class=\"p\">:</span> <span class=\"n\">astropy</span><span class=\"o\">.</span><span class=\"n\">units</span><span class=\"o\">.</span><span class=\"n\">quantity</span><span class=\"o\">.</span><span class=\"n\">Quantity</span></span><span class=\"return-annotation\">) -> <span class=\"n\">astropy</span><span class=\"o\">.</span><span class=\"n\">units</span><span class=\"o\">.</span><span class=\"n\">quantity</span><span class=\"o\">.</span><span class=\"n\">Quantity</span>:</span></span>", "funcdef": "def"}, {"fullname": "unic_pipeline.utils.round_sigfig", "modulename": "unic_pipeline.utils", "qualname": "round_sigfig", "kind": "function", "doc": "<p>Round number to given number of significant figures.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">val</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">astropy</span><span class=\"o\">.</span><span class=\"n\">units</span><span class=\"o\">.</span><span class=\"n\">quantity</span><span class=\"o\">.</span><span class=\"n\">Quantity</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">sigfig</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">astropy</span><span class=\"o\">.</span><span class=\"n\">units</span><span class=\"o\">.</span><span class=\"n\">quantity</span><span class=\"o\">.</span><span class=\"n\">Quantity</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "unic_pipeline.utils.find_near_exact_denominator", "modulename": "unic_pipeline.utils", "qualname": "find_near_exact_denominator", "kind": "function", "doc": "<p>Find a closer common denominator to the input one.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">num</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">den</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">direction</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;up&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "unic_pipeline.utils.extrema_ms", "modulename": "unic_pipeline.utils", "qualname": "extrema_ms", "kind": "function", "doc": "<p>Calculate the frequency range for MS or SPW and longest baseline.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">uvdata</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span>,</span><span class=\"param\">\t<span class=\"n\">spw</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">astropy</span><span class=\"o\">.</span><span class=\"n\">units</span><span class=\"o\">.</span><span class=\"n\">quantity</span><span class=\"o\">.</span><span class=\"n\">Quantity</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "unic_pipeline.utils.get_targets", "modulename": "unic_pipeline.utils", "qualname": "get_targets", "kind": "function", "doc": "<p>Identify targets and return the field names.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">uvdata</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span>,</span><span class=\"param\">\t<span class=\"n\">intent</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;OBSERVE_TARGET#ON_SOURCE&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "unic_pipeline.utils.get_array", "modulename": "unic_pipeline.utils", "qualname": "get_array", "kind": "function", "doc": "<p>Get the ALMA array: 12m, 7m, TP.</p>\n\n<p>WARNING: TP has not been implemented yet.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">uvdata</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "unic_pipeline.utils.validate_step", "modulename": "unic_pipeline.utils", "qualname": "validate_step", "kind": "function", "doc": "<p>Validate the step.</p>\n\n<p>If the step is not in skip and <code>filename</code> exists, then it is deleted and\nreturn <code>True</code> to run the step again. If the step is in skip but <code>filename</code>\ndoes not exist, then run the step to generate it.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">resume</span><span class=\"p\">:</span> <span class=\"nb\">bool</span>,</span><span class=\"param\">\t<span class=\"n\">filename</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span>,</span><span class=\"param\">\t<span class=\"n\">log</span><span class=\"p\">:</span> <span class=\"n\">Callable</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"nb\">print</span><span class=\"o\">&gt;</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "unic_pipeline.utils.max_chan_width", "modulename": "unic_pipeline.utils", "qualname": "max_chan_width", "kind": "function", "doc": "<p>Calculate the maximum channel width.</p>\n\n<p>Given the desired reduction in peak response value, it calculates the\nmaximum channel width accepted. The maximum channel width is calculated by\nsolving the equations in <a href=\"https://safe.nrao.edu/wiki/pub/Main/RadioTutorial/BandwidthSmearing.pdf\">CASA\nguides</a>.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>freq:</strong>  frequency.</li>\n<li><strong>diameter:</strong>  antenna diameter.</li>\n<li><strong>max_baseline:</strong>  maximum baseline.</li>\n<li><strong>reduction:</strong>  optional; reduction in peak response.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Maximum channel width using a Gaussian response.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">freq</span><span class=\"p\">:</span> <span class=\"n\">astropy</span><span class=\"o\">.</span><span class=\"n\">units</span><span class=\"o\">.</span><span class=\"n\">quantity</span><span class=\"o\">.</span><span class=\"n\">Quantity</span>,</span><span class=\"param\">\t<span class=\"n\">diameter</span><span class=\"p\">:</span> <span class=\"n\">astropy</span><span class=\"o\">.</span><span class=\"n\">units</span><span class=\"o\">.</span><span class=\"n\">quantity</span><span class=\"o\">.</span><span class=\"n\">Quantity</span>,</span><span class=\"param\">\t<span class=\"n\">max_baseline</span><span class=\"p\">:</span> <span class=\"n\">astropy</span><span class=\"o\">.</span><span class=\"n\">units</span><span class=\"o\">.</span><span class=\"n\">quantity</span><span class=\"o\">.</span><span class=\"n\">Quantity</span>,</span><span class=\"param\">\t<span class=\"n\">reduction</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.99</span></span><span class=\"return-annotation\">) -> <span class=\"n\">astropy</span><span class=\"o\">.</span><span class=\"n\">units</span><span class=\"o\">.</span><span class=\"n\">quantity</span><span class=\"o\">.</span><span class=\"n\">Quantity</span>:</span></span>", "funcdef": "def"}, {"fullname": "unic_pipeline.utils.continuum_bins", "modulename": "unic_pipeline.utils", "qualname": "continuum_bins", "kind": "function", "doc": "<p>Find the maximum continuum bin sizes.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">uvdata</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span>,</span><span class=\"param\">\t<span class=\"n\">diameter</span><span class=\"p\">:</span> <span class=\"n\">astropy</span><span class=\"o\">.</span><span class=\"n\">units</span><span class=\"o\">.</span><span class=\"n\">quantity</span><span class=\"o\">.</span><span class=\"n\">Quantity</span>,</span><span class=\"param\">\t<span class=\"n\">log</span><span class=\"p\">:</span> <span class=\"n\">Callable</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"nb\">print</span><span class=\"o\">&gt;</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "unic_pipeline.utils.flags_from_cont_ranges", "modulename": "unic_pipeline.utils", "qualname": "flags_from_cont_ranges", "kind": "function", "doc": "<p>Convert continuum ranges into channel flags.</p>\n\n<p>It uses input continuum ranges in LSRK frequency and convert them into\nchannel flags. The flags correspond to channels that will be flagged to\ncompute the continuum.</p>\n\n<p>If <code>invert</code> is set, then the output channel ranges will correspond to\nchannels that are not flagged.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>ranges:</strong>  Ranges of continuum frequencies per SPW.</li>\n<li><strong>uvdata:</strong>  UV data to extract the frequency axis.</li>\n<li><strong>invert:</strong>  Optional; Return unflagged data?</li>\n<li><strong>mask_borders:</strong>  Optional; Mask (flag) channels at the borders?</li>\n<li><strong>border:</strong>  Optional; Amount of channels to mask (flag).</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>A dictionary associating each SPW with flagged channel ranges.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">ranges</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">uvdata</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span>,</span><span class=\"param\">\t<span class=\"n\">invert</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">mask_borders</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">border</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">10</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "unic_pipeline.utils.clumps_to_casa", "modulename": "unic_pipeline.utils", "qualname": "clumps_to_casa", "kind": "function", "doc": "<p>Convert ranges per SPW into casa format.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">clumps_per_spw</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]]]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "unic_pipeline.utils.find_spws", "modulename": "unic_pipeline.utils", "qualname": "find_spws", "kind": "function", "doc": "<p>Filter science spws for source.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">uvdata</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span>, </span><span class=\"param\"><span class=\"n\">intent</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;OBSERVE_TARGET#ON_SOURCE&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "unic_pipeline.utils.get_spws_indices", "modulename": "unic_pipeline.utils", "qualname": "get_spws_indices", "kind": "function", "doc": "<p>Get the indices of the spws.</p>\n\n<p>This task search for duplicated spws (e.g. after measurement set\nconcatenation) and groups the spws indices.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>vis:</strong>  Measurement set.</li>\n<li><strong>selected:</strong>  optional; Selected spectral windows.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>A list with the spws in the vis ms.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">uvdata</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span>,</span><span class=\"param\">\t<span class=\"n\">selected</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "unic_pipeline.utils.get_func_params", "modulename": "unic_pipeline.utils", "qualname": "get_func_params", "kind": "function", "doc": "<p>Check the input parameters of a function and convert.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>func:</strong>  function to inspect.</li>\n<li><strong>config:</strong>  configuration parser section proxy.</li>\n<li><strong>required_keys:</strong>  optional; required keys.</li>\n<li><strong>ignore_keys:</strong>  optional; keys to ignore.</li>\n<li><strong>float_keys:</strong>  optional; keys required as float type.</li>\n<li><strong>int_keys:</strong>  optional; keys required as int type.</li>\n<li><strong>bool_keys:</strong>  optional; keys required as bool type.</li>\n<li><strong>int_list_keys:</strong>  optional; keys required as list of integers.</li>\n<li><strong>float_list_keys:</strong>  optional; keys required as list of floats.</li>\n<li><strong>sep:</strong>  optional; separator for the values in list keys.</li>\n<li><strong>cfgvars:</strong>  optional; values replacing those in config.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">func</span><span class=\"p\">:</span> <span class=\"n\">Callable</span>,</span><span class=\"param\">\t<span class=\"n\">config</span><span class=\"p\">:</span> <span class=\"n\">Mapping</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">required_keys</span><span class=\"p\">:</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">()</span>,</span><span class=\"param\">\t<span class=\"n\">ignore_keys</span><span class=\"p\">:</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">()</span>,</span><span class=\"param\">\t<span class=\"n\">float_keys</span><span class=\"p\">:</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">()</span>,</span><span class=\"param\">\t<span class=\"n\">int_keys</span><span class=\"p\">:</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">()</span>,</span><span class=\"param\">\t<span class=\"n\">bool_keys</span><span class=\"p\">:</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">()</span>,</span><span class=\"param\">\t<span class=\"n\">int_list_keys</span><span class=\"p\">:</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">()</span>,</span><span class=\"param\">\t<span class=\"n\">float_list_keys</span><span class=\"p\">:</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">()</span>,</span><span class=\"param\">\t<span class=\"n\">sep</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;,&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">cfgvars</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span>:</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();